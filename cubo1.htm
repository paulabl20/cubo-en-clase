<!DOCTYPE html>
<html>
<head>
    <title>Titulo</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }

        #text {
            position: absolute;
            padding: 10px;
            width: 100%;
            text-align: center;
            color: #b157a2;
        }
    </style>
</head>
<body>
    <div id="text">cubo<br/>>
        cubo1<br />
        Subtitulo<br />
        Descripción<br />
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>


        function cubeGeometry(lado, color) {

            //Coordenadas
            var x = new THREE.Vector3(1, 0, 0);
            var y = new THREE.Vector3(0, 1, 0);
            var z = new THREE.Vector3(0, 0, 1);

            //Cuadrados que generan el Cubo
            Geometria1 = new THREE.Geometry();
            var vertices = [[0, 0, 0], [lado, 0, 0], [lado, lado, 0], [0, lado, 0], [0, 0, 0]];
            var largoVertice = vertices.length;
            for (i = 0; i < largoVertice; i++) {
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                vector = new THREE.Vector3(x, y, z);
                Geometria1.vertices.push(vector);
            }

            Geometria2 = new THREE.Geometry();
            var vertices = [[0, 0, 0], [0, lado, 0], [0, lado, lado], [0, 0, lado], [0, 0, 0]];
            var largoVertice = vertices.length;
            for (i = 0; i < largoVertice; i++) {
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                vector = new THREE.Vector3(x, y, z);
                Geometria2.vertices.push(vector);
            }

            Geometria3 = new THREE.Geometry();
            var vertices = [[0, 0, 0], [lado, 0, 0], [lado, 0, lado], [0, 0, lado], [0, 0, 0]];
            var largoVertice3= vertices.length;
            for (i = 0; i < largoVertice; i++) {
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                vector1 = new THREE.Vector3(x, y, z);
                Geometria3.vertices.push(vector);
            }

            Geometria4 = new THREE.Geometry();
            var vertices = [[lado, lado, lado], [0, lado, lado], [0, lado, 0], [lado, lado, 0], [lado, lado, lado]];
            var largoVertice = vertices.length;
            for (i = 0; i < largoVertice; i++) {
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                vector = new THREE.Vector3(x, y, z);
                Geometria4.vertices.push(vector);
            }


            Geometria5 = new THREE.Geometry();
            var vertices = [[lado, lado, lado], [0, lado, lado], [0, 0, lado], [lado, 0, lado], [lado, lado, lado]];
            var largoVertice = vertices.length;
            for (i = 0; i < largoVertice; i++) {
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                vector = new THREE.Vector3(x, y, z);
                Geometria5.vertices.push(vector);
            }


            Geometria6 = new THREE.Geometry();
            var vertices = [[lado, lado, lado], [lado, lado, 0], [lado, 0, 0], [lado, 0, lado], [lado, lado, lado]];
            var largoVertice = vertices.length;
            for (i = 0; i < largoVertice; i++) {
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                vector = new THREE.Vector3(x, y, z);
                Geometria6.vertices.push(vector);
            }
           
            //Color Cubo
            MaterialC = new THREE.ParticleBasicMaterial({ color: color });
 
            //Generación cuadrados
            Cuadrado1 = new THREE.Line(Geometria1, MaterialC);
            Cuadrado2 = new THREE.Line(Geometria2, MaterialC);
            Cuadrado3 = new THREE.Line(Geometria3, MaterialC);
            Cuadrado4 = new THREE.Line(Geometria4, MaterialC);
            Cuadrado5 = new THREE.Line(Geometria5, MaterialC);
            Cuadrado6 = new THREE.Line(Geometria6, MaterialC);
            
            //Arreglo cuadrados
            var Cube = [Cuadrado1, Cuadrado2, Cuadrado3, Cuadrado4, Cuadrado5, Cuadrado6];

            return Cube;
        }
        
        function CubeScene(lado, color) {
            
            //Renderizado Cubo
            scene.add(cubeGeometry(lado, color)[0])
            scene.add(cubeGeometry(lado, color)[1])
            scene.add(cubeGeometry(lado, color)[2])
            scene.add(cubeGeometry(lado, color)[3])
            scene.add(cubeGeometry(lado, color)[4])
            scene.add(cubeGeometry(lado, color)[5])
        }
        function init() {

            // Escena
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 2000);
            renderer = new THREE.WebGLRenderer();
            renderer.setClearColor(0x000000, 1.0);
            renderer.setSize(window.innerWidth, window.innerHeight);

            var size = 800;
            var arrowSize = 200;
            var divisions = 80;
            var origin = new THREE.Vector3(0, 0, 0);
            var x = new THREE.Vector3(1, 0, 0);
            var y = new THREE.Vector3(0, 1, 0);
            var z = new THREE.Vector3(0, 0, 1);
            var color2 = new THREE.Color(0x333333);  /// 0x333333
            var colorR = new THREE.Color(0xAA0000);
            var colorG = new THREE.Color(0x00AA00);
            var colorB = new THREE.Color(0x0000AA);

            //Crear la Grilla
            var gridHelperXZ = new THREE.GridHelper(size, divisions, color2, color2);

            //Flechas
            var arrowX = new THREE.ArrowHelper(x, origin, arrowSize, colorR);
            var arrowY = new THREE.ArrowHelper(y, origin, arrowSize, colorG);
            var arrowZ = new THREE.ArrowHelper(z, origin, arrowSize, colorB);

            //Cámara
            camera.position.x = 500;
            camera.position.y = 400;
            camera.position.z = 300;
            camera.lookAt(scene.position);

            //Creación de las Figuras
            //Cuadrado
            Geometria = new THREE.Geometry();
            var vertices = [[10, 10, 0], [40, 10, 0], [40, 40, 0], [10, 40, 0], [10, 10, 0]];
            var largoVertice = vertices.length;
            for (i = 0; i < largoVertice; i++) {
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                vector = new THREE.Vector3(x, y, z);
                Geometria.vertices.push(vector);
            }

            // Cuadrado Modificado
            //Geometria2 = new THREE.Geometry();
            /*var vertices = [[10, 10, 0], [40, 10, 0], [40, 40, 0], [10, 40, 0], [10, 10, 0]];
            var largoVertice = vertices.length;
            for (i = 0; i < largoVertice; i++) {
                x = vertices[i][0];
                y = vertices[i][1];
                z = vertices[i][2];
                vector = new THREE.Vector3(x, y, z);
                Geometria2.vertices.push(vector);
            }*/

            // Colores
            Material = new THREE.ParticleBasicMaterial({ color: 0xFF0000 });
            //Material2 = new THREE.ParticleBasicMaterial({ color: 0x00ff00 });

            Cuadrado = new THREE.Line(Geometria, Material);
            //Cuadrado2 = new THREE.Line(Geometria2, Material2);

            // Matriz de Traslación
            var matrizT = new THREE.Matrix4();
            matrizT.set(1, 0, 0, 0,
                        0, 1, 0, 0,
                        0, 0, 1, 0,
                        0, 0, 0, 1);

            Cuadrado.applyMatrix(matrizT);

            // Matriz de Escala
            var matrizS = new THREE.Matrix4();
            matrizS.set(10, 0, 0, 0,
                        0, 1, 0, 0,
                        0, 0, 1, 0,
                        0, 0, 0, 1);

            Cuadrado.applyMatrix(matrizS);

            // Matriz de Rotación
            var matrizR = new THREE.Matrix4();
            var alpha = 30;
            var cs = Math.cos(alpha);
            var ss = Math.sin(alpha);

            matrizR.set(1 , 0, 0, 0,
                        0  , 1, 0 , 0,
                        0, 0, 1, 0,
                        0  , 0, 0 , 1);

            Cuadrado.applyMatrix(matrizR);

            // En el documento HTML
            document.body.appendChild(renderer.domElement);

            // Agregar elementos al escenario
            scene.add(gridHelperXZ);
            scene.add(arrowX);
            scene.add(arrowY);
            scene.add(arrowZ);
            CubeScene(80, 0xfe013f)
            renderer.render(scene, camera);
        }

        init();  // otra forma: window.onload = init;

    </script>
</body>
</html>